{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\nxtwave\\\\contact-book\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Pagination from './components/Pagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = '/api/contacts';\nexport default function App() {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [page, setPage] = useState(1);\n  const [pages, setPages] = useState(1);\n  const [limit] = useState(5);\n  const [total, setTotal] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const fetchContacts = async (p = 1) => {\n    setLoading(true);\n    try {\n      const res = await fetch(`${API_BASE}?page=${p}&limit=${limit}`);\n      if (!res.ok) throw new Error('Failed to fetch');\n      const data = await res.json();\n      setContacts(data.contacts);\n      setPage(data.page);\n      setPages(data.pages);\n      setTotal(data.total);\n    } catch (err) {\n      console.error(err);\n      alert('Error fetching contacts');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchContacts(1);\n  }, []);\n  const addContact = async contact => {\n    // optimistic UI: push locally while saving\n    try {\n      const tempId = `temp-${Date.now()}`;\n      setContacts(prev => [{\n        ...contact,\n        _id: tempId\n      }, ...prev]);\n      const res = await fetch(API_BASE, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(contact)\n      });\n      if (!res.ok) {\n        // revert and throw\n        await fetchContacts(page);\n        const err = await res.json().catch(() => ({\n          message: 'Unknown error'\n        }));\n        throw new Error(err.message || 'Failed to add contact');\n      }\n      // refresh current page after success (to get server _id & consistent pagination)\n      fetchContacts(page);\n    } catch (err) {\n      console.error(err);\n      alert('Error adding contact: ' + err.message);\n    }\n  };\n  const deleteContact = async id => {\n    // optimistic remove UI\n    const original = contacts;\n    setContacts(prev => prev.filter(c => c._id !== id));\n    try {\n      const res = await fetch(`${API_BASE}/${id}`, {\n        method: 'DELETE'\n      });\n      if (!res.ok) {\n        throw new Error('Failed to delete contact');\n      }\n      // refresh (to maintain pagination)\n      fetchContacts(page);\n    } catch (err) {\n      console.error(err);\n      setContacts(original); // revert\n      alert('Error deleting contact');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Contact Book\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n      addContact: addContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meta\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Total: \", total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n      contacts: contacts,\n      deleteContact: handleDelete,\n      loading: loading,\n      page: page,\n      totalPages: totalPages,\n      setPage: setPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      page: page,\n      pages: pages,\n      onChange: p => fetchContacts(p)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/SPzFlsG32RsG8dhhw+X9TU1EEY=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ContactForm","ContactList","Pagination","jsxDEV","_jsxDEV","API_BASE","App","_s","contacts","setContacts","page","setPage","pages","setPages","limit","total","setTotal","loading","setLoading","fetchContacts","p","res","fetch","ok","Error","data","json","err","console","error","alert","addContact","contact","tempId","Date","now","prev","_id","method","headers","body","JSON","stringify","catch","message","deleteContact","id","original","filter","c","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleDelete","totalPages","onChange","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/nxtwave/contact-book/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Pagination from './components/Pagination';\r\n\r\nconst API_BASE = '/api/contacts';\r\n\r\nexport default function App() {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [pages, setPages] = useState(1);\r\n  const [limit] = useState(5);\r\n  const [total, setTotal] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchContacts = async (p = 1) => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetch(`${API_BASE}?page=${p}&limit=${limit}`);\r\n      if (!res.ok) throw new Error('Failed to fetch');\r\n      const data = await res.json();\r\n      setContacts(data.contacts);\r\n      setPage(data.page);\r\n      setPages(data.pages);\r\n      setTotal(data.total);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert('Error fetching contacts');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => { fetchContacts(1); }, []);\r\n\r\n  const addContact = async (contact) => {\r\n    // optimistic UI: push locally while saving\r\n    try {\r\n      const tempId = `temp-${Date.now()}`;\r\n      setContacts(prev => [{ ...contact, _id: tempId }, ...prev]);\r\n      const res = await fetch(API_BASE, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(contact)\r\n      });\r\n      if (!res.ok) {\r\n        // revert and throw\r\n        await fetchContacts(page);\r\n        const err = await res.json().catch(()=>({message:'Unknown error'}));\r\n        throw new Error(err.message || 'Failed to add contact');\r\n      }\r\n      // refresh current page after success (to get server _id & consistent pagination)\r\n      fetchContacts(page);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert('Error adding contact: ' + err.message);\r\n    }\r\n  };\r\n\r\n  const deleteContact = async (id) => {\r\n    // optimistic remove UI\r\n    const original = contacts;\r\n    setContacts(prev => prev.filter(c => c._id !== id));\r\n    try {\r\n      const res = await fetch(`${API_BASE}/${id}`, { method: 'DELETE' });\r\n      if (!res.ok) {\r\n        throw new Error('Failed to delete contact');\r\n      }\r\n      // refresh (to maintain pagination)\r\n      fetchContacts(page);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setContacts(original); // revert\r\n      alert('Error deleting contact');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Contact Book</h1>\r\n      <ContactForm addContact={addContact} />\r\n      <div className=\"meta\">\r\n        <span>Total: {total}</span>\r\n      </div>\r\n      \r\n      <ContactList\r\n  contacts={contacts}\r\n  deleteContact={handleDelete}\r\n  loading={loading}\r\n  page={page}\r\n  totalPages={totalPages}\r\n  setPage={setPage}\r\n/>\r\n      <Pagination page={page} pages={pages} onChange={p => fetchContacts(p)} />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}